- name: Mise à jour des packages
  apt:
    name: "*"
    state: latest
    update_cache: yes

- name: Remove unused package
  apt:
    name: ["tcpdump", "gdb", "libX11", "telnet", "gcc", "ftp"]
    state: absent

- import_tasks: configure-nvidia-gpu.yml
  tags: nvidia
  when: gpu_instance == 'true'

- include_role:
    name: geerlingguy.docker
  vars:
    docker_daemon_options:
      log-driver: fluentd
      log-opts:
        fluentd-address: localhost:24224
        tag: docker.txt.{{product_name}}.{{env_type}}.{{ '{{' }}.Name{{ '}}' }}_run
        fluentd-async: "true"
      dns: ["172.17.0.1"]
  when: env_type != 'preview' and gpu_instance == 'false'

- include_role:
    name: geerlingguy.docker
  vars:
    docker_daemon_options:
      log-driver: local
      dns: ["172.17.0.1"]
  when: env_type == 'preview' and gpu_instance == 'false'

- name: Docker login
  shell: "echo $PASS | docker login -u '{{ vault.DOCKER_LOGIN.user }}' --password-stdin"
  environment: 
    PASS: "{{ vault.DOCKER_LOGIN.token }}"

- include_role:
    name: patrickjahns.promtail
    apply:
      vars:
        # promtail_version: "latest" // TODO to reactivate when fixed
        promtail_version: "2.9.5"
        promtail_config_server:
          disable: true
        promtail_config_clients:
          - url: "{{ vault.PROMTAIL_URL }}"
            basic_auth:
              username: "monitoring"
              password: "{{ vault.MONITORING_PASSWORD }}"
            external_labels:
              product: "{{ product_name }}"
              env: "{{ env_type }}"
        promtail_config_scrape_configs:
          - job_name: journal
            journal:
              labels:
                job: systemd-journal
                service: journal
            relabel_configs:
              - source_labels: ["__journal__hostname"]
                target_label: "hostname"
              - source_labels: ["__journal__systemd_unit"]
                target_label: "unit"
              - source_labels: ["__journal_image_name"]
                target_label: "image_name"
              - source_labels: ["__journal_container_name"]
                target_label: "container_name"
              - source_labels: ["__journal_container_id"]
                target_label: "container_id"

- name: Vérification binaires ctop déja installés
  stat: path=/usr/local/bin/ctop
  register: ctop

- name: Installation ctop
  when: ctop.stat.exists == False
  shell: "wget https://github.com/bcicen/ctop/releases/download/v0.7.7/ctop-0.7.7-linux-amd64 -O /usr/local/bin/ctop && chmod +x /usr/local/bin/ctop"

- name: Installation node 20
  shell: "curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -"
  when: env_type == 'preview'

- name: apt-key yarn
  shell: "curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -"
  when: env_type == 'preview'

- name: Installation des packages apt
  apt:
    name: ["vim", "htop", "jq", "git", "python3-pip", "python3-docker"]

- name: Installation nodejs
  apt:
    name: ["nodejs"]
  when: env_type == 'preview'

- name: Installation yarn
  shell: "npm install -g yarn --force"
  when: env_type == 'preview'

- name: Set yarn version
  shell: "yarn set version berry"
  when: env_type == 'preview'

- name: Set timezone to Europe/Paris
  community.general.timezone:
    name: Europe/Paris

- name: Definition clavier francais
  lineinfile:
    path: /etc/default/keyboard
    regexp: '^XKBLAYOUT=\"\w*\"$'
    line: 'XKBLAYOUT="fr"'

- name: Définition de l'environnement
  copy:
    dest: /env
    content: "{{env_type}}"

#See https://unix.stackexchange.com/questions/186859/understand-hostname-and-etc-hosts
- name: Définition du nom de l'hôte
  hostname:
    name: "{{ host_name }}"

#Works only with OVH instance
- name: Ajout de l'hôte en tant qu'alias dans /etc/hosts
  lineinfile:
    dest: /etc/hosts
    backup: true
    backrefs: true
    state: present
    regexp: '^(127\.0\.1\.1\tvps-[a-z0-9]+.vps.ovh.net(?:\.novalocal)?\tvps-[a-z0-9]+)( {{host_name}})?$'
    line: '\1 {{ host_name }}'

# https://www.mongodb.com/docs/manual/administration/production-notes/#system-c-library
- name: Mise à jour de libc6
  apt:
    name: libc6
    state: latest

- name: Configuration de ulimit open files
  community.general.pam_limits:
    domain: "*"
    limit_type: "-"
    limit_item: "nofile"
    value: "64000"

- name: Configuration de ulimit processes
  community.general.pam_limits:
    domain: "*"
    limit_type: "-"
    limit_item: "nproc"
    value: "64000"

- name: Add cron to check if system reboot is required
  ansible.builtin.cron:
    name: "reboot-required"
    weekday: "0"
    minute: "0"
    hour: "10"
    job: "bash /opt/app/tools/monitoring/check-reboot-status.sh >> /var/log/cron.log 2>&1; /opt/app/tools/monitoring/export-cron-status-prom.sh -c 'Reboot system' -v $?"

- name: Add cron to reboot if system reboot is required
  ansible.builtin.cron:
    name: "reboot-if-required"
    weekday: "6"
    minute: "57"
    hour: "5"
    job: "[ -f /var/run/reboot-required ] && reboot"

# https://bugs.launchpad.net/ubuntu/+source/apt/+bug/2003851
- name: Add cron to fix apt.systemd.daily BUG
  ansible.builtin.cron:
    name: "apt-systemd-bug"
    minute: "30"
    job: "bash /opt/app/tools/workaround/apt-daily.sh >> /var/log/cron.log 2>&1; /opt/app/tools/monitoring/export-cron-status-prom.sh -c 'Apt Daily Workaround' -v $?"

- name: Disable bash history for all users
  copy:
    dest: /etc/profile.d/disable_history.sh
    owner: root
    group: root
    mode: '0755'
    content: |
      #!/bin/bash
      # Disable bash history for all users

      export HISTFILE=/dev/null
      export HISTSIZE=0
      export HISTFILESIZE=0
      unset HISTFILE

- name: Configure tmux
  template:
    src: "{{playbook_dir}}/../files/tmux/tmux.conf.template.jinja2"
    dest: /etc/tmux.conf
    owner: root
    group: root
    mode: '0755'
