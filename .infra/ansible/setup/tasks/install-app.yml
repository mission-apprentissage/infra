- name: Création des répertoires app/tools & app/configs -> /opt/app
  file:
    path: "/opt/app/{{ item.path }}/"
    state: directory
  with_filetree: "{{playbook_dir}}/../files/app"
  when: item.state == 'directory'

- name: Copie des fichiers 'tools'
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/opt/app/tools/{{ item.path }}"
    mode: "g+x"
  with_filetree: "{{playbook_dir}}/../files/app/tools"
  when: item.state == 'file'

- name: Nettoyage des permissions sudo pour le groupe 'mna'
  lineinfile:
    path: /etc/sudoers
    state: absent
    regexp: "mna"

- name: copy du fichier docker compose
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/opt/app/docker-compose.system.yml"
  with_fileglob:
    - "{{playbook_dir}}/../files/app/docker-compose.system.yml"

- name: récupération du status de docker swarm
  ansible.builtin.shell: docker info --format={% raw %}'{{.Swarm.LocalNodeState}}'{% endraw %}
  register: docker_swarm_status
  when: env_type != 'preview'

- name: initialisation de docker swarm
  ansible.builtin.shell: docker swarm init
  when:
    - env_type != 'preview'
    - docker_swarm_status.stdout.find('inactive') != -1

- name: check du docker network
  ansible.builtin.shell:
    chdir: /opt/app
    cmd: docker network ls --filter name=mna_network -q
  register: network

- debug:
    var: network

- name: création du docker network en swarm mode
  ansible.builtin.shell:
    chdir: /opt/app
    cmd: docker network create -d overlay --attachable mna_network
  when:
    - network.stdout == ""
    - env_type != 'preview'

- name: création du docker network en compose mode
  ansible.builtin.shell:
    chdir: /opt/app
    cmd: docker network create --attachable mna_network
  when:
    - network.stdout == ""
    - env_type == 'preview'

- name: Root only pour tous les répertoires applicatifs
  file:
    path: "/opt/app"
    state: directory
    owner: root
    group: root
    mode: 770

- name: Install htpasswd
  apt:
    name: [apache2-utils]

- name: Create monitoring access file
  shell: htpasswd -bBc "/opt/app/configs/reverse_proxy/locations/monitoring.htpasswd" monitoring {{ vault.MONITORING_PASSWORD }}
